<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css2?family=Inter&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="./assets/css/style.css" type="text/css">
  <title>{{tituloPagina}}</title>
</head>
<style>
  body {
    font-family: 'Inter', sans-serif;
  }
</style>

<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-light border">
    <a class="px-5 navbar-brand mx-5" href="/"><img width="150" src="{{path}}assets/img/logo.png" alt=""></a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item active"> <a class="nav-link" href="/">Produtos</a></li>
        <li><a class="nav-link" href="/listar-tenis">Listagem Tenis</a></li>
        <li><a class="nav-link" href="/editar-estoque">Estoque</a></li>
        <li><a class="nav-link" href="/fornecedores">Fornecedores</a></li>
      </ul>
    </div>
  </nav>
  {{{body}}}
  <footer class="border-top py-5 bg-light">
    <div class="container">
      <div class="row">
        <div class="col-md-4">
          <img src="{{path}}assets/img/logo.png" width="300">
        </div>
        <div class="col-md-2">
          <h4 class="titulo-footer">SOBRE</h4>
          <ul class="navbar-nav">
            <li><a class="link" href="">Sobre</a></li>
            <li><a class="link" href="">Empregos</a></li>
            <li><a class="link" href="">Imprensa</a></li>
            <li><a class="link" href="">Novidades</a></li>
          </ul>
        </div>
        <div class="col-md-2">
          <h4 class="titulo-footer">APOIADORES</h4>
          <ul class="navbar-nav">
            <li><a class="link" href="">Marcas</a></li>
            <li><a class="link" href="">Desenvolvedores</a></li>
          </ul>
        </div>
        <div class="col-md-2">
          <h4 class="titulo-footer">LINKS UTEIS</h4>
          <ul class="navbar-nav">
            <li><a class="link" href="">Ajuda</a></li>
            <li><a class="link" href="">Presentes</a></li>
            <li><a class="link" href="">Player da web</a></li>
          </ul>
        </div>
        <div class="col-md-2">
          <ul class="list-unstyled">
            <li>
              <a href=""><img src="{{path}}assets/img/facebook.png"></a>
            </li>
            <li>
              <a href=""><img src="{{path}}assets/img/twitter.png"></a>
            </li>
            <li>
              <a href=""><img src="{{path}}assets/img/instagram.png"></a>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </footer>
</body>
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
  integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
  integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
  integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script>
  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      define(factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.VMasker = factory();
    }
  }(this, function () {
    var DIGIT = "9",
      ALPHA = "A",
      ALPHANUM = "S",
      BY_PASS_KEYS = [9, 16, 17, 18, 36, 37, 38, 39, 40, 91, 92, 93],
      isAllowedKeyCode = function (keyCode) {
        for (var i = 0, len = BY_PASS_KEYS.length; i < len; i++) {
          if (keyCode == BY_PASS_KEYS[i]) {
            return false;
          }
        }
        return true;
      },
      mergeMoneyOptions = function (opts) {
        opts = opts || {};
        opts = {
          delimiter: opts.delimiter || ".",
          lastOutput: opts.lastOutput,
          precision: opts.hasOwnProperty("precision") ? opts.precision : 2,
          separator: opts.separator || ",",
          showSignal: opts.showSignal,
          suffixUnit: opts.suffixUnit && (" " + opts.suffixUnit.replace(/[\s]/g, '')) || "",
          unit: opts.unit && (opts.unit.replace(/[\s]/g, '') + " ") || "",
          zeroCents: opts.zeroCents
        };
        opts.moneyPrecision = opts.zeroCents ? 0 : opts.precision;
        return opts;
      },
      // Fill wildcards past index in output with placeholder
      addPlaceholdersToOutput = function (output, index, placeholder) {
        for (; index < output.length; index++) {
          if (output[index] === DIGIT || output[index] === ALPHA || output[index] === ALPHANUM) {
            output[index] = placeholder;
          }
        }
        return output;
      }
      ;

    var VanillaMasker = function (elements) {
      this.elements = elements;
    };

    VanillaMasker.prototype.unbindElementToMask = function () {
      for (var i = 0, len = this.elements.length; i < len; i++) {
        this.elements[i].lastOutput = "";
        this.elements[i].onkeyup = false;
        this.elements[i].onkeydown = false;

        if (this.elements[i].value.length) {
          this.elements[i].value = this.elements[i].value.replace(/\D/g, '');
        }
      }
    };

    VanillaMasker.prototype.bindElementToMask = function (maskFunction) {
      var that = this,
        onType = function (e) {
          e = e || window.event;
          var source = e.target || e.srcElement;

          if (isAllowedKeyCode(e.keyCode)) {
            setTimeout(function () {
              that.opts.lastOutput = source.lastOutput;
              source.value = VMasker[maskFunction](source.value, that.opts);
              source.lastOutput = source.value;
              if (source.setSelectionRange && that.opts.suffixUnit) {
                source.setSelectionRange(source.value.length, (source.value.length - that.opts.suffixUnit.length));
              }
            }, 0);
          }
        }
        ;
      for (var i = 0, len = this.elements.length; i < len; i++) {
        this.elements[i].lastOutput = "";
        this.elements[i].onkeyup = onType;
        if (this.elements[i].value.length) {
          this.elements[i].value = VMasker[maskFunction](this.elements[i].value, this.opts);
        }
      }
    };

    VanillaMasker.prototype.maskMoney = function (opts) {
      this.opts = mergeMoneyOptions(opts);
      this.bindElementToMask("toMoney");
    };

    VanillaMasker.prototype.maskNumber = function () {
      this.opts = {};
      this.bindElementToMask("toNumber");
    };

    VanillaMasker.prototype.maskAlphaNum = function () {
      this.opts = {};
      this.bindElementToMask("toAlphaNumeric");
    };

    VanillaMasker.prototype.maskPattern = function (pattern) {
      this.opts = { pattern: pattern };
      this.bindElementToMask("toPattern");
    };

    VanillaMasker.prototype.unMask = function () {
      this.unbindElementToMask();
    };

    var VMasker = function (el) {
      if (!el) {
        throw new Error("VanillaMasker: There is no element to bind.");
      }
      var elements = ("length" in el) ? (el.length ? el : []) : [el];
      return new VanillaMasker(elements);
    };

    VMasker.toMoney = function (value, opts) {
      opts = mergeMoneyOptions(opts);
      if (opts.zeroCents) {
        opts.lastOutput = opts.lastOutput || "";
        var zeroMatcher = ("(" + opts.separator + "[0]{0," + opts.precision + "})"),
          zeroRegExp = new RegExp(zeroMatcher, "g"),
          digitsLength = value.toString().replace(/[\D]/g, "").length || 0,
          lastDigitLength = opts.lastOutput.toString().replace(/[\D]/g, "").length || 0
          ;
        value = value.toString().replace(zeroRegExp, "");
        if (digitsLength < lastDigitLength) {
          value = value.slice(0, value.length - 1);
        }
      }

      var number = value.toString();
      // if separator is in string, make sure we zero-pad to respect it
      var separatorIndex = number.indexOf(opts.separator),
        missingZeros = (opts.precision - (number.length - separatorIndex - 1));

      if (separatorIndex !== -1 && (missingZeros > 0)) {
        number = number + ('0' * missingZeros);
      }

      number = number.replace(/[\D]/g, "");

      var clearDelimiter = new RegExp("^(0|\\" + opts.delimiter + ")"),
        clearSeparator = new RegExp("(\\" + opts.separator + ")$"),
        money = number.substr(0, number.length - opts.moneyPrecision),
        masked = money.substr(0, money.length % 3),
        cents = new Array(opts.precision + 1).join("0")
        ;

      money = money.substr(money.length % 3, money.length);
      for (var i = 0, len = money.length; i < len; i++) {
        if (i % 3 === 0) {
          masked += opts.delimiter;
        }
        masked += money[i];
      }
      masked = masked.replace(clearDelimiter, "");
      masked = masked.length ? masked : "0";
      var signal = "";
      if (opts.showSignal === true) {
        signal = value < 0 || (value.startsWith && value.startsWith('-')) ? "-" : "";
      }
      if (!opts.zeroCents) {
        var beginCents = Math.max(0, number.length - opts.precision),
          centsValue = number.substr(beginCents, opts.precision),
          centsLength = centsValue.length,
          centsSliced = (opts.precision > centsLength) ? opts.precision : centsLength
          ;
        cents = (cents + centsValue).slice(-centsSliced);
      }
      var output = opts.unit + signal + masked + opts.separator + cents;
      return output.replace(clearSeparator, "") + opts.suffixUnit;
    };

    VMasker.toPattern = function (value, opts) {
      var pattern = (typeof opts === 'object' ? opts.pattern : opts),
        patternChars = pattern.replace(/\W/g, ''),
        output = pattern.split(""),
        values = value.toString().replace(/\W/g, ""),
        charsValues = values.replace(/\W/g, ''),
        index = 0,
        i,
        outputLength = output.length,
        placeholder = (typeof opts === 'object' ? opts.placeholder : undefined)
        ;

      for (i = 0; i < outputLength; i++) {
        // Reached the end of input
        if (index >= values.length) {
          if (patternChars.length == charsValues.length) {
            return output.join("");
          }
          else if ((placeholder !== undefined) && (patternChars.length > charsValues.length)) {
            return addPlaceholdersToOutput(output, i, placeholder).join("");
          }
          else {
            break;
          }
        }
        // Remaining chars in input
        else {
          if ((output[i] === DIGIT && values[index].match(/[0-9]/)) ||
            (output[i] === ALPHA && values[index].match(/[a-zA-Z]/)) ||
            (output[i] === ALPHANUM && values[index].match(/[0-9a-zA-Z]/))) {
            output[i] = values[index++];
          } else if (output[i] === DIGIT || output[i] === ALPHA || output[i] === ALPHANUM) {
            if (placeholder !== undefined) {
              return addPlaceholdersToOutput(output, i, placeholder).join("");
            }
            else {
              return output.slice(0, i).join("");
            }
            // exact match for a non-magic character
          } else if (output[i] === values[index]) {
            index++;
          }

        }
      }
      return output.join("").substr(0, i);
    };

    VMasker.toNumber = function (value) {
      return value.toString().replace(/(?!^-)[^0-9]/g, "");
    };

    VMasker.toAlphaNumeric = function (value) {
      return value.toString().replace(/[^a-z0-9 ]+/i, "");
    };

    return VMasker;
  }));
  (function () {
    VMasker(document.getElementById("cnpj")).maskPattern('99.999.999/9999-99');
    VMasker(document.getElementById("telefone")).maskPattern('(99) 9999-9999');
  })();
</script>

</html>